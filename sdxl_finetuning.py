# -*- coding: utf-8 -*-
"""SDXL_FineTuning_Megha.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P8f9Gbm3gOxssP8DqEAgt4bijlhYZuAD

# [Reference Link](https://github.com/huggingface/diffusers/blob/main/examples/text_to_image/README_sdxl.md)

# **Stable Diffusion XL Text-to-Image Fine-Tuning**

# ***Checking for Available GPU***
"""

!nvidia-smi

"""# ***Installing Necessary Libraries***"""

!pip install diffusers
!pip install accelerate

"""# ***Path of the Dataset***"""

from google.colab import drive
drive.mount('/content/drive')

'/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519'

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519

"""# ***Setting-Up HuggingFace Token***"""

from huggingface_hub import notebook_login
notebook_login()

"""# ***Model Inferencing - Before Fine-Tunning***"""

# Loading the Text-Guided Image to Image Model

import torch
from diffusers import AutoPipelineForImage2Image
from diffusers.utils import make_image_grid, load_image

pipeline = AutoPipelineForImage2Image.from_pretrained(
    "stabilityai/stable-diffusion-xl-base-1.0", torch_dtype=torch.float16, variant="fp16", use_safetensors=True
)
pipeline.enable_model_cpu_offload()

# Performing Inference

from PIL import Image, ImageDraw
import io

# Function to add border to an image
def add_border(image, border_color, border_size):
    """
    Add a border to an image.

    Args:
        image (PIL.Image): The input image.
        border_color (tuple): RGB color tuple for the border color.
        border_size (int): The size of the border to be added.

    Returns:
        PIL.Image: The image with added border.
    """
    width, height = image.size
    new_width = width + 2 * border_size
    new_height = height + 2 * border_size

    new_image = Image.new("RGB", (new_width, new_height), border_color)
    new_image.paste(image, (border_size, border_size))

    return new_image


image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5030930-4.jpg"


init_image = Image.open(image_path)

prompt = "Produce a variation of this marble style textile pattern, keeping the flowing, organic lines intact, with subtle changes in the pattern swirls and color gradients."
negative_prompt = "unclear pattern, distorted image, clumsy design, unstructured layout, chaotic elements, mismatched aesthetics, unbalanced composition"

image = pipeline(
                prompt,
                negative_prompt=negative_prompt,
                image=init_image,
                strength=0.6,
                guidance_scale=7
                ).images[0]

# Set border color and size
border_color = (255, 255, 255)  # White border
border_size = 5  # 5 pixels border

# Add border to each image
init_image_with_border = add_border(init_image, border_color, border_size)
image_with_border = add_border(image, border_color, border_size)

# Display the images with borders
make_image_grid([init_image_with_border, image_with_border], rows=1, cols=2)

# Performing Inference

from PIL import Image, ImageDraw
import io

# Function to add border to an image
def add_border(image, border_color, border_size):
    """
    Add a border to an image.

    Args:
        image (PIL.Image): The input image.
        border_color (tuple): RGB color tuple for the border color.
        border_size (int): The size of the border to be added.

    Returns:
        PIL.Image: The image with added border.
    """
    width, height = image.size
    new_width = width + 2 * border_size
    new_height = height + 2 * border_size

    new_image = Image.new("RGB", (new_width, new_height), border_color)
    new_image.paste(image, (border_size, border_size))

    return new_image


image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5030930-4.jpg"

init_image = Image.open(image_path)

# prompt = '''Generate variations of an input fabric image from the fashion industry while preserving its structural elements like patterns and textures. Apply changes in color schemes, subtly modify pattern details, and introduce different fabric textures while maintaining the original design's integrity. Ensure that the new colors enhance the aesthetic appeal, pattern modifications do not distort the design, and textures match the fabric type. The output should maintain the resolution, aspect ratio, and high quality of the input image, ensuring the design is still suitable for fabric manufacturing.'''
prompt = "Create a variation of the provided fabric design, retaining the overall structure, layout, and color theme. Introduce subtle variations while preserving the grid structure for marble patterns. Modify specific marbled patterns, maintaining the overall theme"
# prompt = "Create a pattern variation inspired by the input image, respecting the original structure and theme while introducing creative modifications. Ensure the variation matches the style of the input image: like geometric patterns should remain geometric, and abstract floral patterns should stay abstract floral, etc. Preserve the overall layout, including grid lines, borders, primary shapes, and use a similar or complementary color palette."
# negative_prompt = "lowres, bad anatomy, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry"

image = pipeline(prompt, image=init_image,strength=0.6).images[0]


border_color = (255, 255, 255)  # White border
border_size = 5


init_image_with_border = add_border(init_image, border_color, border_size)
image_with_border = add_border(image, border_color, border_size)


make_image_grid([init_image_with_border, image_with_border], rows=1, cols=2)

# Performing Inference

from PIL import Image, ImageDraw
import io

# Function to add border to an image
def add_border(image, border_color, border_size):
    """
    Add a border to an image.

    Args:
        image (PIL.Image): The input image.
        border_color (tuple): RGB color tuple for the border color.
        border_size (int): The size of the border to be added.

    Returns:
        PIL.Image: The image with added border.
    """
    width, height = image.size
    new_width = width + 2 * border_size
    new_height = height + 2 * border_size

    new_image = Image.new("RGB", (new_width, new_height), border_color)
    new_image.paste(image, (border_size, border_size))

    return new_image

# Load the initial image
image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/2030902-2.jpg"
init_image = Image.open(image_path)

# Specify the prompt
prompt = prompt = "Produce a variation of this marble style textile pattern, keeping the flowing lines theme, with changes in the pattern swirls and color gradients."
# prompt = "Create a softly altered version of this textile pattern."
neg_prompt = "unclear pattern, distorted image,  clumsy design"

# Process the image with the prompt
image = pipeline(prompt, negative_prompt=neg_prompt, image=init_image).images[0]

# Set border color and size
border_color = (255, 255, 255)  # White border
border_size = 5  # 5 pixels border

# Add border to each image
init_image_with_border = add_border(init_image, border_color, border_size)
image_with_border = add_border(image, border_color, border_size)

# Display the images with borders
make_image_grid([init_image_with_border, image_with_border], rows=1, cols=2)

# Performing Inference

from PIL import Image, ImageDraw
import io

# Function to add border to an image
def add_border(image, border_color, border_size):
    """
    Add a border to an image.

    Args:
        image (PIL.Image): The input image.
        border_color (tuple): RGB color tuple for the border color.
        border_size (int): The size of the border to be added.

    Returns:
        PIL.Image: The image with added border.
    """
    width, height = image.size
    new_width = width + 2 * border_size
    new_height = height + 2 * border_size

    new_image = Image.new("RGB", (new_width, new_height), border_color)
    new_image.paste(image, (border_size, border_size))

    return new_image

# Load the initial image
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5031268.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/50312176 -2.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/50309120.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/120310014-3.jpg"
image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5031210-3.jpg"


init_image = Image.open(image_path)

# prompt = "Subtle variation of [original pattern style] textile pattern."
prompt = "a color variation of [original pattern style] textile pattern."
# prompt = "Generate a textile pattern variation that captures the essence of this paint brush style, with slight modifications in brush stroke thickness, direction and placement."
neg_prompt = "unclear pattern, distorted image, clumsy design"


# Process the image with the prompt
image = pipeline(prompt, neg_prompt, image=init_image).images[0]

# Set border color and size
border_color = (255, 255, 255)  # White border
border_size = 5  # 5 pixels border

# Add border to each image
init_image_with_border = add_border(init_image, border_color, border_size)
image_with_border = add_border(image, border_color, border_size)

# Display the images with borders
make_image_grid([init_image_with_border, image_with_border], rows=1, cols=2)

# Performing Inference

from PIL import Image, ImageDraw
import io

# Function to add border to an image
def add_border(image, border_color, border_size):
    """
    Add a border to an image.

    Args:
        image (PIL.Image): The input image.
        border_color (tuple): RGB color tuple for the border color.
        border_size (int): The size of the border to be added.

    Returns:
        PIL.Image: The image with added border.
    """
    width, height = image.size
    new_width = width + 2 * border_size
    new_height = height + 2 * border_size

    new_image = Image.new("RGB", (new_width, new_height), border_color)
    new_image.paste(image, (border_size, border_size))

    return new_image


# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5030932-5.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5031226-4.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5031179.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/10309027.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5031148 -4.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5031282-4.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5031174.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/10301057-2.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/10301044-2.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/50310146-5.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/13031213-5.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/10309070-4.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/13031222-2.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/13031212 SPL -1.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/10309027-2.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/13031204 SPL -4.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/4031065-3.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/2031197-3.jpg"
# image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/4031247-3.jpg"
image_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/5031224-3.jpg"



init_image = Image.open(image_path)

prompt = "Create an image with the exact same pattern but using a new vibrant color scheme"
# prompt = "Create an image with the exact same pattern but using red and pink color scheme"

style = "textile"

neg_prompt = "changed pattern, inconsistent colors, distorted image, clumsy design, chaotic elements, mismatched aesthetics, unclean and fuzzy patterns, same color scheme, ugly patterns, varied artistic style"


image = pipeline(
    prompt = prompt,
    negative_prompt = neg_prompt,
    Style = style,
    image=init_image,
    guidance_scale=7,
    steps = 40
    ).images[0]


# Set border color and size
border_color = (255, 255, 255)  # White border
border_size = 5  # 5 pixels border

# Add border to each image
init_image_with_border = add_border(init_image, border_color, border_size)
image_with_border = add_border(image, border_color, border_size)

# Display the images with borders
make_image_grid([init_image_with_border, image_with_border], rows=1, cols=2)

"""# ***Model Inferencing - After Fine-Tunning***

#***Cloning the GitHub Repo***
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/

!git clone https://github.com/huggingface/diffusers

# Commented out IPython magic to ensure Python compatibility.
# !pip install ./diffusers
# %cd /content/drive/MyDrive/diffusers

!pip install -e .
!pip install wandb
!pip install deepspeed

# Installing Necessary Libraries

!pip install -U -r /content/drive/MyDrive/diffusers/examples/text_to_image/requirements_sdxl.txt

from huggingface_hub import notebook_login
notebook_login()

import wandb
wandb.login()

# compute_environment: LOCAL_MACHINE
# debug: true
# deepspeed_config:
#   gradient_accumulation_steps: 1
#   gradient_clipping: 1.0
#   offload_optimizer_device: none
#   offload_param_device: none
#   zero3_init_flag: false
#   zero_stage: 2
# distributed_type: DEEPSPEED
# downcast_bf16: 'no'
# machine_rank: 0
# main_training_function: main
# mixed_precision: fp16
# num_machines: 1
# num_processes: 1
# rdzv_backend: static
# same_network: true
# tpu_env: []
# tpu_use_cluster: false
# tpu_use_sudo: false
# use_cpu: false

"""# ***Initializing the Accelerator***"""

!accelerate config default --mixed_precision fp16

from accelerate.utils import write_basic_config
write_basic_config()

"""# ***Loading the Stable Diffusion XL Model***"""

import os
os.environ['MODEL_NAME'] = f'stabilityai/stable-diffusion-xl-base-1.0'
os.environ['DATASET_NAME'] = f"/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/"
# os.environ['OUTPUT_DIR'] = f'/content/drive/MyDrive/sdxl_fine_tuned_model'
os.environ['OUTPUT_DIR'] = f'sdxl_fine_tuned_weights'
os.environ['VAE_NAME'] = f'madebyollin/sdxl-vae-fp16-fix'
os.environ['ACCELERATE_CONFIG_FILE'] = f'/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/accelerate_config.yaml'
# os.environ['TRAIN_DATA_DIR'] = f'/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/

"""# ***Fine-Tuning Stable Diffusion XL Model***"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519

# --resolution=512  \
  # --train_batch_size=10 \
  # --num_train_epochs=50 \
  # --checkpointing_steps=2 \
  # --learning_rate=1e-04 \
  # --lr_scheduler="constant" \
  # --lr_warmup_steps=0 \
  # --mixed_precision="fp16" \
  # --validation_epochs=20 \
  # --seed=1234 \
  # --output_dir=$OUTPUT_DIR \
  # --validation_prompt='''Cream beige blue and green color,Leaf with an abstract geometrical shape Water color effect Brushstroke Forming  a mix of leaf and abstract design''' \
  # --report_to="wandb"



!accelerate launch --config_file $ACCELERATE_CONFIG_FILE /content/drive/MyDrive/diffusers/examples/text_to_image/train_text_to_image_lora_sdxl.py \
  --pretrained_model_name_or_path=$MODEL_NAME \
  --pretrained_vae_model_name_or_path=$VAE_NAME \
  --dataset_name=$DATASET_NAME \
  --image_column="image" \
  --caption_column="text" \
  --resolution=512 \
  --train_batch_size=4 \
  --num_train_epochs=10 \
  --checkpointing_steps=159 \
  --learning_rate=5e-05 \
  --lr_scheduler="cosine" \
  --lr_warmup_steps=100 \
  --mixed_precision="fp16" \
  --max_train_steps=1590 \
  --validation_epochs=2 \
  --seed=1234 \
  --output_dir=$OUTPUT_DIR \
  --validation_prompt='''Cream beige blue and green color,Leaf with an abstract geometrical shape Water color effect Brushstroke Forming  a mix of leaf and abstract design''' \
  --report_to="wandb"

"""# ***Saving and Downloading the Fine-Tuned Model***"""

import shutil

output_dir = os.environ['OUTPUT_DIR']

checkpoint_files = os.listdir(output_dir)
print("Checkpoint files:", checkpoint_files)

"""# ***Getting Inference from the Fine-Tuned Model***

### ***Text-to-Image Inference***
"""

!pip install diffusers
!pip install accelerate

!pip install -U peft

# Loading the Fine-Tuned Model
import torch
from diffusers import StableDiffusionPipeline,DiffusionPipeline

model_path = "/content/drive/MyDrive/5resize_images_abstract_2024-05-09_0519/sdxl_fine_tuned_model"
pipe = DiffusionPipeline.from_pretrained("stabilityai/stable-diffusion-xl-base-1.0", torch_dtype=torch.float16)
pipe.to("cuda")
pipe.load_lora_weights(model_path)

prompt = "create a seamless paisley pattern with a pink background and a floral desgin in shades of yellow."
image = pipe(prompt).images[0]
image

prompt = " The image is a geometric pattern composed of interlocking curved shapes in shades of blue, green, and beige. The shapes are arranged in a grid-like pattern, with each shape having a unique color and texture. The overall effect is one of movement and energy, as the shapes seem to flow into each other."
image = pipe(prompt).images[0]
image

prompt = " The pattern is a seamless vector design featuring a lattice of interlocking organic shapes resembling stylized leaves. The shapes are formed by a series of curved lines that create a sense of movement and energy."
image = pipe(prompt).images[0]
image

prompt = "This is a seamless paisley pattern. It features a dark blue background with a multi-colored floral design. The pattern is made up of repeating paisley shapes The paisley shapes are filled with intricate floral details and have a curved, teardrop-shaped outline. The colors used in the pattern are purple, blue, green, yellow, and orange."
image = pipe(prompt).images[0]
image

"""### ***Image-to-Image Inference***"""

from PIL import Image
import io
import torch
from diffusers import AutoPipelineForImage2Image
from diffusers.utils import make_image_grid, load_image

# image_path = "/content/drive/MyDrive/Datasets/abstract_2024-05-10_1314/5030930-4.jpg"

image_path = "/content/drive/MyDrive/Datasets/7resize_images_abstract_2024-05-09_0519/5031119.jpg"

init_image = Image.open(image_path)
init_image_resized = init_image.resize((512, 512))


# prompt = "Design a variation of this image featuring dynamic oil paint with wavy brush strokes in random directions. Maintain the textured, expressive brushstroke style. Use a pastel color palette while preserving the random fluid and wavy motion. Experiment with stroke thickness, layering, and overlapping to add visual interest."

prompt = "Create a variant of this fabric pattern using dynamic oil paint with textured, wavy brushstrokes in random directions. Employ a pastel palette for soft hues while emphasizing fluid, expressive motion. Vary stroke thickness, layering, and overlap to enhance visual complexity and interest, maintaining the original's expressive brushstroke style."


neg_prompt = "unclear pattern, distorted image, clumsy design, chaotic elements, mismatched aesthetics, unclean and fuzzy patterns, no variation, ugly patterns, varied artistic style"

image = pipe(prompt, neg_prompt=neg_prompt, image=init_image_resized, num_inference_steps = 50, guidance_scale=8).images[0]
output_image = image.resize((512, 512))
make_image_grid([init_image_resized, output_image], rows=1, cols=2)

image_path = "/content/drive/MyDrive/Datasets/abstract_2024-05-09_0519/50312167 -4.jpg"

init_image = Image.open(image_path)
init_image_resized = init_image.resize((512, 512))

# prompt = "Create a variation of the provided fabric design. Retain the overall structure and layout and color theme, but replace the existing patterns with new, yet similar elements. If the pattern features specific shapes or abstract designs, modify them while maintaining the overall theme."
# prompt = "Generate a variation of a geometric pattern that involves changing the shapes used while maintaining their arrangement and overall grid structure."
# prompt = "Create a similar pattern inspired by the provided example image, respecting the original structure, style, design and theme while introducing subtle creative modifications. Use the same style and output image should not look very different from input image"
# negative_prompt = "Ensure the output image avoids changes to the original structure and design of image. Avoid deviating from the original design of the pattern. Maintain consistency with the grid lines, borders, and primary shapes, refraining from adding excessive complexity that detracts from the design."
prompt = "Subtle variation of [original pattern style] textile pattern."
image = pipe(prompt,  image=init_image_resized, guidance_scale=5).images[0]
output_image = image.resize((512, 512))
make_image_grid([init_image_resized, output_image], rows=1, cols=2)

image_path = "/content/drive/MyDrive/Datasets/abstract_2024-05-09_0519/5031017 -4.jpg"

init_image = Image.open(image_path)
init_image_resized = init_image.resize((512, 512))

# prompt = "Create a variation of the provided fabric design, retaining the overall structure, layout, and color theme. Introduce subtle variations while preserving the grid structure for geometric patterns. Modify specific shapes, abstract floral designs, or marbled patterns, maintaining the overall theme."
neg_prompt = "different image style and color"
prompt = "Create a softly altered version of this textile pattern."


image = pipe(prompt, neg_prompt ,  image=init_image_resized, guidance_scale=5).images[0]
output_image = image.resize((512, 512))
make_image_grid([init_image_resized, output_image], rows=1, cols=2)

image_path = "/content/drive/MyDrive/Datasets/abstract_2024-05-09_0519/103030108-4.jpg"

init_image = Image.open(image_path)
init_image_resized = init_image.resize((512, 512))

# prompt = "Create a variation of the provided fabric design, retaining the overall structure, layout, and color theme. Introduce subtle variations while preserving the grid structure for geometric patterns. Modify specific shapes, abstract floral designs, or marbled patterns, maintaining the overall theme."
neg_prompt = "Deviating from the input image style and color"

# prompt = "Generate a pattern that closely resembles the provided example, keeping the original style, structure, and theme intact. Make only subtle creative modifications that enhance the design without altering the core aesthetic or primary shapes of the pattern."
prompt = "Subtle variation of [original pattern style] textile pattern."

image = pipe(prompt, image=init_image_resized, guidance_scale=5).images[0]
output_image = image.resize((512, 512))
make_image_grid([init_image_resized, output_image], rows=1, cols=2)

image_path = "/content/drive/MyDrive/Datasets/abstract_2024-05-09_0519/10301075.jpg"

init_image = Image.open(image_path)
init_image_resized = init_image.resize((512, 512))

# prompt = "Create a variation of the provided fabric design. Retain the overall structure and layout and color theme, but replace the existing patterns with new, yet similar elements. If the pattern features specific shapes, abstract designs, marbled pattern, modify them while maintaining the overall theme."
prompt = "Produce a variation of this marble style textile pattern, keeping the flowing, organic lines intact, with subtle changes in the pattern swirls and color gradients."

image = pipe(prompt, image=init_image_resized, guidance_scale=5).images[0]
output_image = image.resize((512, 512))
make_image_grid([init_image_resized, output_image], rows=1, cols=2)

image_path = "/content/drive/MyDrive/Datasets/abstract_2024-05-09_0519/5030930-2.jpg"

init_image = Image.open(image_path)
init_image_resized = init_image.resize((512, 512))

# prompt = "Create a variation of the provided fabric design. Retain the overall structure and layout and color theme, but replace the existing patterns with new, yet similar elements. If the pattern features specific shapes, abstract designs or marbled pattern, modify them while maintaining the overall theme."
prompt = "Produce a variation of this marble style textile pattern, keeping the flowing, organic lines intact, with subtle changes in the pattern swirls and color gradients."

image = pipe(prompt, image=init_image_resized, guidance_scale=5).images[0]
output_image = image.resize((512, 512))
make_image_grid([init_image_resized, output_image], rows=1, cols=2)

image_path = "/content/drive/MyDrive/Datasets/abstract_2024-05-09_0519/50310146-3.jpg"

init_image = Image.open(image_path)
init_image_resized = init_image.resize((512, 512))

prompt = "Create a variation of the provided fabric design. Retain the overall structure and layout and color theme, but replace the existing patterns with new, yet similar elements. If the pattern features specific shapes, abstract designs or marbled pattern, modify them while maintaining the overall theme."

image = pipe(prompt, image=init_image_resized, guidance_scale=5).images[0]
output_image = image.resize((512, 512))
make_image_grid([init_image_resized, output_image], rows=1, cols=2)

image_path = "/content/drive/MyDrive/Datasets/7resize_images_abstract_2024-05-09_0519/50310146-5.jpg"

init_image = Image.open(image_path)
init_image_resized = init_image.resize((512, 512))

# prompt = "Create a variation of the provided fabric design. Retain the overall structure and layout and color theme, but replace the existing patterns with new, yet similar elements. If the pattern features specific shapes, abstract designs or marbled pattern, modify them while maintaining the overall theme."
prompt = "Create a variation of the provided fabric design. Retain the overall structure and layout and color theme, but replace the existing patterns with new, yet similar elements. If the pattern features abstract floral designs, modify them while maintaining the overall theme."


image = pipe(prompt, image=init_image_resized, guidance_scale=5).images[0]
output_image = image.resize((512, 512))
make_image_grid([init_image_resized, output_image], rows=1, cols=2)

image_path = "/content/drive/MyDrive/Datasets/abstract_2024-05-09_0519/20311100-2.jpg"

init_image = Image.open(image_path)
init_image_resized = init_image.resize((512, 512))

# prompt = "Create a variation of the provided fabric design. Retain the overall structure and layout and color theme, but replace the existing patterns with new, yet similar elements. If the pattern features marbled pattern, modify them while maintaining the overall theme."
prompt = "Produce a variation of this marble style textile pattern, keeping the flowing, organic lines intact, with subtle changes in the pattern swirls and color gradients."

image = pipe(prompt, image=init_image_resized, guidance_scale=5).images[0]
output_image = image.resize((512, 512))
make_image_grid([init_image_resized, output_image], rows=1, cols=2)

image_path = "/content/drive/MyDrive/Datasets/abstract_2024-05-10_1314/5030633-5.jpg"

init_image = Image.open(image_path)
init_image_resized = init_image.resize((512, 512))

# prompt = "Generate a variation of the images by changing the texture while maintaining their overall structure."

prompt = "Generate a new textile pattern that preserves the geometric style of the original image, introducing minor alterations to the angles and lines."

image = pipe(prompt, image=init_image_resized, guidance_scale=5).images[0]
output_image = image.resize((512, 512))
make_image_grid([init_image_resized, output_image], rows=1, cols=2)